package gov.texas.tceq.LocationService;

import java.io.IOException;
import java.net.MalformedURLException;
import java.net.URL;
import java.util.ArrayList;
import java.util.Scanner;
@ClassPreamble()

public class MyFileReader {

	/**
	 * Looks for and reads, if present, the output file generated by the geoprocessing service. The file will be empty, or contain zip=[zip name] lepc=[lepc name]
	 */
	
	// State
	private String zip = null;
	private String lepc = null;
	private String county = null;
	private String nullString = "Null";

	// Constructor
	public MyFileReader() {
		setZip("");
		setLepc("");
		setCounty("");
	}
	
	// Behavior
	/**
	 * 
	 * @param fileURL URL returned from geoprocessing service. Represents the location of the output text file.
	 * @return The lines of the file stored in a list.
	 */
	ArrayList<String> readGPOutputFile(String fileURL) {
		ArrayList<String> fileLines = new ArrayList<>();
		URL url = null;
		if(fileURL.isEmpty() || fileURL == null){
			return fileLines;
		}
		try {
			url = new URL(fileURL);
		} catch (MalformedURLException e1) {
//			e1.printStackTrace();
			setZip(getNullString());
			setLepc(getNullString());
			setCounty(getNullString());
		}
		try(Scanner s = new Scanner(url.openStream())){
			while(s.hasNext()){
				fileLines.add(s.nextLine());
			}
		} catch (IOException e1) {
			e1.printStackTrace();
		}
		return fileLines;
	}

	/**
	 * 
	 * @param fileLines List of the lines from the text file.
	 */
	void parseFileLines(ArrayList<String> fileLines) {
		for (String line : fileLines) {
			if (line.contains("zip")) {
				int equalsIndex = line.indexOf("=");
				setZip(line.substring(equalsIndex + 1));
			}
			if (line.contains("lepc")) {
				int equalsIndex = line.indexOf("=");
				setLepc(line.substring(equalsIndex + 1));
			}
			if (line.contains("county")) {
				int equalsIndex = line.indexOf("=");
				setCounty(line.substring(equalsIndex + 1));
			}
		}
	}

	// Getters and Setters
	public String getZip() {
		return zip;
	}

	public void setZip(String zip) {
		this.zip = zip;
	}

	public String getLepc() {
		return lepc;
	}

	public void setLepc(String lepc) {
		this.lepc = lepc;
	}

	public String getCounty() {
		return county;
	}

	public void setCounty(String county) {
		this.county = county;
	}
	
	public String getNullString() {
		return nullString;
	}

	public void setNullString(String nullString) {
		this.nullString = nullString;
	}

	//ToString
	@Override
	public String toString() {
		return "MyFileReader [zip=" + zip + ", lepc=" + lepc + ", county=" + county + ", nullString=" + nullString
				+ "]";
	}
	
	//Hashcode and Equals
	@Override
	public int hashCode() {
		final int prime = 31;
		int result = 1;
		result = prime * result + ((county == null) ? 0 : county.hashCode());
		result = prime * result + ((lepc == null) ? 0 : lepc.hashCode());
		result = prime * result + ((nullString == null) ? 0 : nullString.hashCode());
		result = prime * result + ((zip == null) ? 0 : zip.hashCode());
		return result;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj)
			return true;
		if (obj == null)
			return false;
		if (getClass() != obj.getClass())
			return false;
		MyFileReader other = (MyFileReader) obj;
		if (county == null) {
			if (other.county != null)
				return false;
		} else if (!county.equals(other.county))
			return false;
		if (lepc == null) {
			if (other.lepc != null)
				return false;
		} else if (!lepc.equals(other.lepc))
			return false;
		if (nullString == null) {
			if (other.nullString != null)
				return false;
		} else if (!nullString.equals(other.nullString))
			return false;
		if (zip == null) {
			if (other.zip != null)
				return false;
		} else if (!zip.equals(other.zip))
			return false;
		return true;
	}
}
