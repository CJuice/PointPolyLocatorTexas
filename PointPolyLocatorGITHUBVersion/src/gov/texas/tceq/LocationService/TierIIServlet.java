package gov.texas.tceq.LocationService;

import java.io.IOException;
import java.io.PrintWriter;
import java.util.ArrayList;

import javax.servlet.ServletException;
import javax.servlet.annotation.WebServlet;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.json.simple.JSONObject;

@ClassPreamble()

/**
 * Servlet implementation class TierIIServlet
 */

@WebServlet(name = "TierIIGISServlet", description = "Receives Latitude and Longitude. Returns LEPC and County name, and Zip Code for Texas.", urlPatterns = {
		"/TierIIGISServlet" })
public class TierIIServlet extends HttpServlet {
	
	/**
	 * This sends a request to the ArcGIS Server Geoprocessing service, 
	 * handles the response generated by that service, and sends the results on to JET for use.
	 */
	private static final long serialVersionUID = 1L;
//	private static final String JET_SERVLET_URL = "/TempDisplayOfGPOutcome.xhtml";
	private static final String LATITUDE_PARAMETER_STRING = "latitude";
	private static final String LONGITUDE_PARAMETER_STRING = "longitude";
	private static final String NULL_STRING = "Null";

	/**
	 * Default constructor.
	 */
	public TierIIServlet() {
	}

	/**
	 * @see HttpServlet#doGet(HttpServletRequest request, HttpServletResponse
	 *      response) Validate values passed to servlet. Create
	 *      SpatialDataObject sdo, get attributes from request, assign to sdo,
	 *      hit geoprocessing service, get response, parse file url from JSON
	 *      response, open file if present, get county and lepc, or error
	 *      message if present. Forward response onward.
	 */
	protected void doGet(HttpServletRequest request, HttpServletResponse response)
			throws ServletException, IOException {
		
		//Local State
		SpatialDataObject sdo = new SpatialDataObject();
		RESTServiceAccess restService = new RESTServiceAccess();
		MyFileReader myFileReader = new MyFileReader();
		JSONHandler jsonHandler = new JSONHandler();
		String latitude = request.getParameter(LATITUDE_PARAMETER_STRING);
		String longitude = request.getParameter(LONGITUDE_PARAMETER_STRING);
		String completeURL;
		String geoprocessingResponse;
		ArrayList<String> tempArrayListOfFileLines;
		
		//Detect Deployment Environment and set into state
		String serverEnv = getServletContext().getRealPath("/");
		String environmentCommonName = checkServerEnvironment(serverEnv);
		sdo.setServerInfo(environmentCommonName);
		
		// Check coordinates using TX bounding box values.
		// If lat or lon fall outside the bounding box for Texas then send
		// response immediately, never contacting the geoprocessing service
		if (sdo.checkForValidSpatialCoordinates(latitude, longitude)) {
			
			//Valid
			sdo.setLatitude(latitude);
			sdo.setLongitude(longitude);
		} else {
			
			//LIVE IMPLEMENTATION
			JSONObject finalObject = jsonHandler.buildJSONObject(NULL_STRING, NULL_STRING, NULL_STRING, "Bad Coordinate Value");
			response.setContentType("application/json");
			PrintWriter out = response.getWriter();
			out.print(finalObject);
			out.flush();
			return;
		}

		// Build the url to use when accessing the geoprocessing service
		completeURL = URLBuilder.buildGeoprocessingServiceURL(environmentCommonName, sdo.getLatitude(), sdo.getLongitude());
		geoprocessingResponse = restService.sendRequest(completeURL);

		// Process the JSON Response
		jsonHandler.parseJSON(geoprocessingResponse);

		// Open file, parse JSON, assign information to appropriate state
		tempArrayListOfFileLines = myFileReader.readGPOutputFile(jsonHandler.getFilePath());
		
		//A bad coordinate results in no file created. The process should return before this point
		//	if bad coordinates are given. As a backup, this checks for a files existence.
		if (tempArrayListOfFileLines.isEmpty()) {
			
			//LIVE IMPLEMENTATION
			JSONObject finalObject = jsonHandler.buildJSONObject(NULL_STRING, NULL_STRING, NULL_STRING, "No File Existed Due to Bad Coordinates");
			response.setContentType("application/json");
			PrintWriter out = response.getWriter();
			out.print(finalObject);
			out.flush();
			return;
		} else {
			myFileReader.parseFileLines(tempArrayListOfFileLines);
			sdo.setZipZCTA(myFileReader.getZip());
			sdo.setNameLEPC(myFileReader.getLepc());
			sdo.setNameCounty(myFileReader.getCounty());
			sdo.setFilePath(jsonHandler.getFilePath());
			
			//LIVE IMPLEMENTATION
			JSONObject finalObject = jsonHandler.buildJSONObject(sdo.getZipZCTA(), sdo.getNameLEPC(), sdo.getNameCounty(), sdo.getErrorMessage());
			response.setContentType("application/json");
			PrintWriter out = response.getWriter();
			out.print(finalObject);
			out.flush();
			return;
		}
	}
	
	/**
	 * 
	 * @param serverEnv The result of <pre>{@code getServletContext().getRealPath("/")}</pre>, which is the path of the deployed war file; From this the environment can be detected.
	 * @return String indicating the common name of the deployment environment.
	 */
	private String checkServerEnvironment(String serverEnv) {
		if(serverEnv.contains("mwgd01") || serverEnv.contains("standalone")){
			return "Development";
		}
		else if(serverEnv.contains("mwgt01") || serverEnv.contains("mwgt02")){
			return "Test";
		}
		else{
			return "Production";
		}
	}

	/**
	 * @see HttpServlet#doPost(HttpServletRequest request, HttpServletResponse
	 *      response)
	 */
	protected void doPost(HttpServletRequest request, HttpServletResponse response)
			throws ServletException, IOException {
		doGet(request, response);
	}
}
